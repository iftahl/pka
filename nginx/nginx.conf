user root;

# It is recommended to have the same number of worker processes as the number of CPU cores in server
worker_processes 16;
worker_priority -20;
worker_rlimit_nofile 200000;  # Should be at least twice of worker_connections


# Log Levels: debug, warn, error, crit, alert, and emerg
#error_log /home/ubuntu/railabouni/nginx/logs/error.log debug; #TODO: change this to the folder where nginx log resides
error_log /home/ubuntu/railabouni/nginx/logs/error.log warn;   #TODO: change this to the folder where nginx log resides

load_module modules/ngx_ssl_engine_pka_module.so;

ssl_engine {
        use_engine pka;
	default_algorithms RSA;
        pka_engine{
                # Polling interval in ms for worker process to poll for results from the pka engine,
                # default value = 1. setting it to 0 means that we are reyling on the PKALib polling threads
                pka_external_poll_interval 1;
        }
}

events {
  # epoll is an enhanced version of select/poll, and it improves the processing of a large number of file descriptors
  # Available Options: epoll, select, poll, kqueue, etc 
	
  use epoll;    #The epoll module is important for performance.  It set the behavior to poll on events coming from IO.
  epoll_events 20000;
  worker_connections 100000;  #This directive tells how many connections a worker_process can have.  Ensure to never set this too low or high. To low will prevent getting good performance, and too high may CPU starve connections.
    
  multi_accept on;  #This directive allows worker_processes to handle multiple connections at a time rather than dealing with only one at a time.

  accept_mutex off;  #This directive tells the worker_processes to get in a line rather than all rush for a new connection.
  
}


http {
         ssl_buffer_size 65536;    #This is telling nginx to use 64KB buffers when dealing with TLS records

          include       mime.types; #Since file extensions are meaningless on the web, we ensure we specify what content type we are sending
          default_type  application/octet-stream;   #This is the default value for a binary stream
          sendfile on;  #An optimization that allows for file data to transfer within the kernel from file descriptor to file descriptor rather than leaving the kernel, heading to user space, and then going back into kernel space.
          access_log off;   #Turns off logging, which consequently reduces operation latency to some degree.
        
        server #Here is your main server block that has all IP specific directives and behaviors. YOU WILL HAVE TO DUPLICATE THIS BLOCK FOR EACH IP YOU USE.  So if you have 172.16.1.1 .... 172.16.12.1 , you will need 12 server blocks.
                {
                #Listen is the IP:PORT to listen to. Reuseport will provide the kernel behavior of load balancing incoming connections to the available NGINX socket listeners.  There is an NGINX socket listener per server block, the block we currently are in now. So if you have one server block with one IP:PORT pair, then you have one socket listener. If you have two server blocks with two IP:PORT pairs, you have two socket listeners so on and so fort. The backlog parameter tells NGINX how many connections can be in a wait queue when it cannot service the connection immediately. These connections are still amidst TCP handshake.  The so_keepalive directive tell NGINX to close the TCP connection once it is finished.

                listen 0.0.0.0:4440 ssl backlog=131072 so_keepalive=off;# reuseport;


                sendfile on;  #Though already provided in parent block, continue to specify it.

                keepalive_timeout 0s;  #Even though TCP keepalives are disabled, we still set it to a value of 0
                tcp_nopush on;  #This directive tells NGINX to wait to send data once it has a payload the size of MSS or Max Segment Size.  This is a follow on to Nagles Algorithm.
 
                tcp_nodelay on;  #This works opposite of tcp_nopush, where here we do not delay when sending data. We set this to ensure packets get sent without delaying for some period of time. This is to reduce latency.
                ssl_verify_client off;  #Here we do not verify client certificates.
                ssl_session_tickets off;    #We do not cache ssl session information to ensure freshness of connections.
                access_log  off;  #turn off access log to reduce latency and overhead.
                lingering_close off; #We immediately close the TCP connection without waiting.
                lingering_time 1;  #We still set this even though we disabled lingering delay.
                

                ssl_asynch           on;    #Ensure SSL works asynchronously
               
                ssl_session_timeout  300s;  #Even though we disable ssl session caching, we set a timeout for 300 seconds to preserve current productive sessions doing work.

                ssl_protocols TLSv1.2;
                ssl_ciphers AES128-GCM-SHA256:AES128-SHA:AES256-SHA;
                ssl_prefer_server_ciphers on;

		ssl_certificate /home/ubuntu/railabouni/nginx/key_cert/server.crt; #TODO: change this to the folder where server cert resides
                ssl_certificate_key /home/ubuntu/railabouni/nginx/key_cert/server.key; #TODO: change this to the folder where server key resides

                location / {

                        root html;
                        index index.html index.htm;
                }
        }
}

